{"dependencies":[],"generated":{"js":"/*\r\n * Copyright Joyent, Inc. and other Node contributors.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a\r\n * copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to permit\r\n * persons to whom the Software is furnished to do so, subject to the\r\n * following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included\r\n * in all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n*/\r\n\r\nif (!String.prototype.startsWith) {\r\n    String.prototype.startsWith = function(searchString, position) {\r\n        position = position || 0;\r\n        return this.indexOf(searchString, position) === position;\r\n    };\r\n}\r\n\r\nfunction EventEmitter() {\r\n    this._events = this._events || {};\r\n    this._maxListeners = this._maxListeners || undefined;\r\n}\r\n\r\nmodule.exports = EventEmitter;\r\n\r\n// Backwards-compat with node 0.10.x\r\nEventEmitter.EventEmitter = EventEmitter;\r\n\r\nEventEmitter.prototype._events = undefined;\r\nEventEmitter.prototype._maxListeners = undefined;\r\n\r\n// By default EventEmitters will print a warning if more than 10 listeners are\r\n// added to it. This is a useful default which helps finding memory leaks.\r\nEventEmitter.defaultMaxListeners = 10;\r\n\r\n// Obviously not all Emitters should be limited to 10. This function allows\r\n// that to be increased. Set to zero for unlimited.\r\nEventEmitter.prototype.setMaxListeners = function(n) {\r\n    if (!isNumber(n) || n < 0 || isNaN(n)) {\r\n        throw TypeError(\"n must be a positive number\");\r\n    }\r\n\r\n    this._maxListeners = n;\r\n\r\n    return this;\r\n};\r\n\r\n// Emit multiple events..\r\nEventEmitter.prototype.emits = function(types, values) {\r\n    for (var i = 0; i < types.length; i++) {\r\n        values[i].unshift(types[i]);\r\n        this.emit.apply(this, values[i]);\r\n    }\r\n}\r\n\r\nEventEmitter.prototype.emit = function(type) {\r\n    var er, handler, len, args, i, listeners;\r\n\r\n    if (!this._events) { this._events = {}; }\r\n\r\n    // If there is no 'error' event listener then throw.\r\n    if (type === \"error\") {\r\n        if (!this._events.error || (isObject(this._events.error) && !this._events.error.length)) {\r\n            er = arguments[1];\r\n            if (er instanceof Error) { throw er; }\r\n            throw TypeError(\"Uncaught, unspecified \\\"error\\\" event.\");\r\n        }\r\n    }\r\n\r\n    handler = this._events[type];\r\n\r\n    if (isUndefined(handler)) { return false; }\r\n\r\n    if (isFunction(handler)) {\r\n        switch (arguments.length) {\r\n            // fast cases\r\n            case 1:\r\n                handler.call(this);\r\n                break;\r\n            case 2:\r\n                handler.call(this, arguments[1]);\r\n                break;\r\n            case 3:\r\n                handler.call(this, arguments[1], arguments[2]);\r\n                break;\r\n                // slower\r\n            default:\r\n                args = Array.prototype.slice.call(arguments, 1);\r\n                handler.apply(this, args);\r\n        }\r\n    } else if (isObject(handler)) {\r\n        args = Array.prototype.slice.call(arguments, 1);\r\n        listeners = handler.slice();\r\n        len = listeners.length;\r\n        for (i = 0; i < len; i++) { listeners[i].apply(this, args); }\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nEventEmitter.prototype.addListener = function(type, listener) {\r\n    var m;\r\n\r\n    if (!isFunction(listener)) { throw TypeError(\"listener must be a function\"); }\r\n\r\n    if (!this._events) { this._events = {}; }\r\n\r\n    // To avoid recursion in the case that type === \"newListener\"! Before\r\n    // adding it to the listeners, first emit \"newListener\".\r\n    if (this._events.newListener) {\r\n        this.emit(\"newListener\", type, isFunction(listener.listener) ? listener.listener : listener);\r\n    }\r\n\r\n    // Optimize the case of one listener. Don't need the extra array object.\r\n    if (!this._events[type]) { this._events[type] = listener; }\r\n    // If we've already got an array, just append.\r\n    else if (isObject(this._events[type])) { this._events[type].push(listener); }\r\n    // Adding the second element, need to change to array.\r\n    else { this._events[type] = [this._events[type], listener]; }\r\n\r\n    // Check for listener leak\r\n    if (isObject(this._events[type]) && !this._events[type].warned) {\r\n        if (!isUndefined(this._maxListeners)) {\r\n            m = this._maxListeners;\r\n        } else {\r\n            m = EventEmitter.defaultMaxListeners;\r\n        }\r\n\r\n        if (m && m > 0 && this._events[type].length > m) {\r\n            this._events[type].warned = true;\r\n            console.error(\"(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.\", this._events[type].length);\r\n            // Not supported in IE 10\r\n            if (typeof console.trace === \"function\") {\r\n                console.trace();\r\n            }\r\n        }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\r\n\r\n// Modified to support multiple calls..\r\nEventEmitter.prototype.once = function(type, listener) {\r\n    if (!isFunction(listener)) { throw TypeError(\"listener must be a function\"); }\r\n\r\n    var fired = false;\r\n\r\n    if (this._events.hasOwnProperty(type) && type.charAt(0) === \"_\") {\r\n        var count = 1;\r\n        var searchFor = type;\r\n\r\n        for (var k in this._events){\r\n            if (this._events.hasOwnProperty(k) && k.startsWith(searchFor)) {\r\n                count++;\r\n            }\r\n        }\r\n        type = type + count;\r\n    }\r\n\r\n    function g() {\r\n        if (type.charAt(0) === \"_\" && !isNaN(type.substr(type.length - 1))) {\r\n            type = type.substring(0, type.length - 1);\r\n        }\r\n        this.removeListener(type, g);\r\n\r\n        if (!fired) {\r\n            fired = true;\r\n            listener.apply(this, arguments);\r\n        }\r\n    }\r\n\r\n    g.listener = listener;\r\n    this.on(type, g);\r\n\r\n    return this;\r\n};\r\n\r\n// Emits a \"removeListener\" event if the listener was removed..\r\n// Modified to support multiple calls from .once()..\r\nEventEmitter.prototype.removeListener = function(type, listener) {\r\n    var list, position, length, i;\r\n\r\n    if (!isFunction(listener)) { throw TypeError(\"listener must be a function\"); }\r\n\r\n    if (!this._events || !this._events[type]) { return this; }\r\n\r\n    list = this._events[type];\r\n    length = list.length;\r\n    position = -1;\r\n    if (list === listener || (isFunction(list.listener) && list.listener === listener)) {\r\n        delete this._events[type];\r\n\r\n        if (this._events.hasOwnProperty(type + \"2\") && type.charAt(0) === \"_\") {\r\n            var searchFor = type;\r\n            for (var k in this._events){\r\n                if (this._events.hasOwnProperty(k) && k.startsWith(searchFor)) {\r\n                    if (!isNaN(parseInt(k.substr(k.length - 1)))) {\r\n                        this._events[type + parseInt(k.substr(k.length - 1) - 1)] = this._events[k];\r\n                        delete this._events[k];\r\n                    }\r\n                }\r\n            }\r\n\r\n            this._events[type] = this._events[type + \"1\"];\r\n            delete this._events[type + \"1\"];\r\n        }\r\n        if (this._events.removeListener) { this.emit(\"removeListener\", type, listener); }\r\n    }\r\n    else if (isObject(list)) {\r\n        for (i = length; i-- > 0;) {\r\n            if (list[i] === listener ||\r\n                (list[i].listener && list[i].listener === listener)) {\r\n                position = i;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (position < 0) { return this; }\r\n\r\n        if (list.length === 1) {\r\n            list.length = 0;\r\n            delete this._events[type];\r\n        }\r\n        else { list.splice(position, 1); }\r\n\r\n        if (this._events.removeListener) { this.emit(\"removeListener\", type, listener); }\r\n    }\r\n\r\n    return this;\r\n};\r\n\r\nEventEmitter.prototype.removeAllListeners = function(type) {\r\n    var key, listeners;\r\n\r\n    if (!this._events) { return this; }\r\n\r\n    // not listening for removeListener, no need to emit\r\n    if (!this._events.removeListener) {\r\n        if (arguments.length === 0) { this._events = {}; }\r\n        else if (this._events[type]) { delete this._events[type]; }\r\n        return this;\r\n    }\r\n\r\n    // emit removeListener for all listeners on all events\r\n    if (arguments.length === 0) {\r\n        for (key in this._events) {\r\n            if (key === \"removeListener\") { continue; }\r\n            this.removeAllListeners(key);\r\n        }\r\n        this.removeAllListeners(\"removeListener\");\r\n        this._events = {};\r\n        return this;\r\n    }\r\n\r\n    listeners = this._events[type];\r\n\r\n    if (isFunction(listeners)) { this.removeListener(type, listeners); }\r\n    else if (listeners) { while (listeners.length) { this.removeListener(type, listeners[listeners.length - 1]); } }\r\n    delete this._events[type];\r\n\r\n    return this;\r\n};\r\n\r\nEventEmitter.prototype.listeners = function(type) {\r\n    var ret;\r\n    if (!this._events || !this._events[type]) { ret = []; }\r\n    else if (isFunction(this._events[type])) { ret = [this._events[type]]; }\r\n    else { ret = this._events[type].slice(); }\r\n    return ret;\r\n};\r\n\r\nEventEmitter.prototype.listenerCount = function(type) {\r\n    if (this._events) {\r\n        var evlistener = this._events[type];\r\n\r\n        if (isFunction(evlistener)) { return 1; }\r\n        else if (evlistener) { return evlistener.length; }\r\n    }\r\n    return 0;\r\n};\r\n\r\nEventEmitter.listenerCount = function(emitter, type) {\r\n    return emitter.listenerCount(type);\r\n};\r\n\r\nfunction isFunction(arg) {\r\n    return typeof arg === \"function\";\r\n}\r\n\r\nfunction isNumber(arg) {\r\n    return typeof arg === \"number\";\r\n}\r\n\r\nfunction isObject(arg) {\r\n    return typeof arg === \"object\" && arg !== null;\r\n}\r\n\r\nfunction isUndefined(arg) {\r\n    return arg === void 0;\r\n}\r\n"},"hash":"b239dc1c6de5e82cdf0ec39d64710df6"}