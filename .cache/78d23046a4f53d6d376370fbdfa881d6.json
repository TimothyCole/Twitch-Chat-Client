{"dependencies":[],"generated":{"js":"// Initialize the queue with a specific delay..\r\nfunction queue(defaultDelay) {\r\n    this.queue = [];\r\n    this.index = 0;\r\n    this.defaultDelay = defaultDelay || 3000;\r\n}\r\n\r\n// Add a new function to the queue..\r\nqueue.prototype.add = function add(fn, delay) {\r\n    this.queue.push({\r\n        fn: fn,\r\n        delay: delay\r\n    });\r\n};\r\n\r\n// Run the current queue..\r\nqueue.prototype.run = function run(index) {\r\n    (index || index === 0) && (this.index = index);\r\n    this.next();\r\n};\r\n\r\n// Go to the next in queue..\r\nqueue.prototype.next = function next() {\r\n    var i = this.index++;\r\n    var at = this.queue[i];\r\n    var next = this.queue[this.index];\r\n\r\n    if (!at) { return; }\r\n\r\n    at.fn();\r\n    next && setTimeout(() => {\r\n        this.next();\r\n    }, next.delay || this.defaultDelay);\r\n};\r\n\r\n// Reset the queue..\r\nqueue.prototype.reset = function reset() {\r\n    this.index = 0;\r\n};\r\n\r\n// Clear the queue..\r\nqueue.prototype.clear = function clear() {\r\n    this.index = 0;\r\n    this.queue = [];\r\n};\r\n\r\nexports.queue = queue;\r\n"},"hash":"1d159716aa6ced8d9ceb582b66382ba8"}