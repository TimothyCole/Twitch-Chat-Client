{"dependencies":[{"name":"process"}],"generated":{"js":"var process = require(\"process\");\nvar self = module.exports = {\r\n\t// Return the second value if the first value is undefined..\r\n\tget: (obj1, obj2) => { return typeof obj1 === \"undefined\" ? obj2 : obj1; },\r\n\r\n\t// Value is a boolean..\r\n\tisBoolean: (obj) => { return typeof(obj) === \"boolean\"; },\r\n\r\n\t// Value is a finite number..\r\n\tisFinite: (int) => { return isFinite(int) && !isNaN(parseFloat(int)); },\r\n\r\n\t// Value is an integer..\r\n\tisInteger: (int) => { return !isNaN(self.toNumber(int, 0)); },\r\n\r\n\t// Username is a justinfan username..\r\n\tisJustinfan: (username) => { return RegExp(\"^(justinfan)(\\\\d+$)\", \"g\").test(username); },\r\n\r\n\t// Value is null..\r\n\tisNull: (obj) => { return obj === null; },\r\n\r\n\t// Value is a regex..\r\n\tisRegex: (str) => { return /[\\|\\\\\\^\\$\\*\\+\\?\\:\\#]/.test(str); },\r\n\r\n\t// Value is a string..\r\n\tisString: (str) => { return typeof(str) === \"string\"; },\r\n\r\n\t// Value is a valid url..\r\n\tisURL: (str) => { return RegExp(\"^(?:(?:https?|ftp)://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\\\\.?)(?::\\\\d{2,5})?(?:[/?#]\\\\S*)?$\",\"i\").test(str); },\r\n\r\n\t// Return a random justinfan username..\r\n\tjustinfan: () => { return `justinfan${Math.floor((Math.random() * 80000) + 1000)}`; },\r\n\r\n\t// Return a valid password..\r\n\tpassword: (str) => { return str === \"SCHMOOPIIE\" || \"\" || null ? \"SCHMOOPIIE\" : `oauth:${str.toLowerCase().replace(\"oauth:\", \"\")}`; },\r\n\r\n\t// Race a promise against a delay..\r\n\tpromiseDelay: (time) => { return new Promise(function (resolve) { setTimeout(resolve, time); }); },\r\n\r\n\t// Replace all occurences of a string using an object..\r\n\treplaceAll: (str, obj) => {\r\n\t\tif (str === null || typeof str === \"undefined\") { return null; }\r\n\t    for (var x in obj) {\r\n\t        str = str.replace(new RegExp(x, \"g\"), obj[x]);\r\n\t    }\r\n\t    return str;\r\n\t},\r\n\r\n\tunescapeHtml: (safe) => {\r\n\t\treturn safe.replace(/\\\\&amp\\\\;/g, \"&\")\r\n\t\t\t.replace(/\\\\&lt\\\\;/g, \"<\")\r\n\t\t\t.replace(/\\\\&gt\\\\;/g, \">\")\r\n\t\t\t.replace(/\\\\&quot\\\\;/g, \"\\\"\")\r\n\t\t\t.replace(/\\\\&#039\\\\;/g, \"'\");\r\n\t},\r\n\r\n\t// Add word to a string..\r\n\taddWord: (line, word) => {\r\n\t\tif (line.length != 0) { line += \" \"; }\r\n\t\treturn (line += word);\r\n\t},\r\n\r\n\t// Return a valid channel name..\r\n\tchannel: (str) => {\r\n\t\tvar channel = typeof str === \"undefined\" || str === null ? \"\" : str;\r\n\t\treturn channel.charAt(0) === \"#\" ? channel.toLowerCase() : \"#\" + channel.toLowerCase();\r\n\t},\r\n\r\n\t// Extract a number from a string..\r\n\textractNumber: (str) => {\r\n\t\tvar parts = str.split(\" \");\r\n\t\tfor (var i = 0; i < parts.length; i++) {\r\n\t\t\tif (self.isInteger(parts[i])) { return ~~parts[i]; }\r\n\t\t}\r\n\t\treturn 0;\r\n\t},\r\n\r\n\t// Format the date..\r\n\tformatDate: (date) => {\r\n\t    var hours = date.getHours();\r\n\t    var mins  = date.getMinutes();\r\n\r\n\t    hours = (hours < 10 ? \"0\" : \"\") + hours;\r\n\t    mins = (mins < 10 ? \"0\" : \"\") + mins;\r\n\r\n\t    return `${hours}:${mins}`;\r\n\t},\r\n\r\n\t// Inherit the prototype methods from one constructor into another..\r\n\tinherits: (ctor, superCtor) => {\r\n\t\tctor.super_ = superCtor\r\n\t    var TempCtor = function () {};\r\n\t    TempCtor.prototype = superCtor.prototype;\r\n\t    ctor.prototype = new TempCtor();\r\n\t    ctor.prototype.constructor = ctor;\r\n\t},\r\n\r\n\t// Return whether inside a Node application or not..\r\n\tisNode: () => {\r\n\t\ttry {\r\n\t\t\tif (module.exports = \"object\" === typeof process && Object.prototype.toString.call(process) === \"[object process]\") { return true; }\r\n\t\t\treturn false;\r\n\t\t} catch(e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\r\n\tisExtension: () => {\r\n\t\ttry {\r\n\t\t\tif (window.chrome && chrome.runtime && chrome.runtime.id) { return true; }\r\n\t\t\treturn false;\r\n\t\t} catch(e) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t},\r\n\r\n\t// Merge two objects..\r\n\tmerge: (obj1, obj2) => {\r\n\t\tfor (var p in obj2) {\r\n\t\t\ttry {\r\n\t\t\t\tif (obj2[p].constructor == Object) { obj1[p] = self.merge(obj1[p], obj2[p]); }\r\n\t\t\t\telse { obj1[p] = obj2[p]; }\r\n\t\t\t} catch(e) { obj1[p] = obj2[p]; }\r\n\t\t}\r\n\t\treturn obj1;\r\n\t},\r\n\r\n\t// Split a line but don't cut a word in half..\r\n\tsplitLine: (input, length) => {\r\n\t\tvar lastSpace = input.substring(0, length).lastIndexOf(\" \");\r\n\t\treturn [input.substring(0, lastSpace), input.substring(lastSpace + 1)];\r\n\t},\r\n\r\n\t// Parse string to number. Returns NaN if string can't be parsed to number..\r\n\ttoNumber: (num, precision) => {\r\n\t\tif (num === null) return 0;\r\n\t\tvar factor = Math.pow(10, self.isFinite(precision) ? precision : 0);\r\n\t\treturn Math.round(num * factor) / factor;\r\n\t},\r\n\r\n\t// Merge two arrays..\r\n\tunion: (arr1, arr2) => {\r\n\t\tvar hash = {};\r\n\t\tvar ret = [];\r\n\t\tfor(var i=0; i < arr1.length; i++) {\r\n\t\t\tvar e = arr1[i];\r\n\t\t\tif (!hash[e]) {\r\n\t\t\t\thash[e] = true;\r\n\t\t\t\tret.push(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor(var i=0; i < arr2.length; i++) {\r\n\t\t\tvar e = arr2[i];\r\n\t\t\tif (!hash[e]) {\r\n\t\t\t\thash[e] = true;\r\n\t\t\t\tret.push(e);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ret;\r\n\t},\r\n\r\n\t// Return a valid username..\r\n\tusername: (str) => {\r\n\t\tvar username = typeof str === \"undefined\" || str === null ? \"\" : str;\r\n\t\treturn username.charAt(0) === \"#\" ? username.substring(1).toLowerCase() : username.toLowerCase();\r\n\t}\r\n}\r\n"},"hash":"4b21a8a9b1c3e06d012227e608d40264"}